<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/23/2025 9:35:16 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-BK8EF5JA"
  DTS:CreatorName="LAPTOP-BK8EF5JA\OWNER"
  DTS:DTSID="{AF8015FC-410A-44A6-BEB9-8D8B61972709}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="4105"
  DTS:ObjectName="TelusPackage"
  DTS:PackageType="5"
  DTS:VersionBuild="20"
  DTS:VersionGUID="{816E3712-56ED-4B0D-852E-A2939AB9560F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task clientT"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{3d23dbc1-5dec-4cc7-80ca-a79b8e7032d3}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task clientT"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{f51d1535-d2f7-4844-8aba-766112cb5f70}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="NetworkDrivePath_clientT">
          <DTS:VariableValue
            DTS:DataType="8">Z:\TELUS</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_1213390b996c41229aeb2690e397ff94"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::NetworkDrivePath_clientT">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using static System.Net.WebRequestMethods;
using File = System.IO.File;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.IO.Compression;
#endregion

namespace ST_5ebb2efd615e4d1d9f0ed86105efd78e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            string srcFolderPath_clientT;
            string destFolderPath_clientT;
            string filePath;
            string fileName;
            string networkDrivePath_clientT = Dts.Variables["User::NetworkDrivePath_clientT"].Value.ToString(); ;


            string[] files_clientT;

            string fileDate = "";

            srcFolderPath_clientT = @"C:\Users\OWNER\Documents\Lakehead University\Make up courses\Make up courses (Winter 2025)\Riippen project with TGT solutions\source folder Telus";

            files_clientT = Directory.GetFiles(srcFolderPath_clientT);

            // Initialize array of FileInfo objects to hold file info
            FileInfo[] filesInfoClientT = new FileInfo[files_clientT.Length];

            // Get file info for each file in the source folder
            for (int i = 0; i < files_clientT.Length; i++)
            {
                filesInfoClientT[i] = new FileInfo(files_clientT[i]);
            }
            int fileCount = filesInfoClientT.Length;

            //get file info for each file srcFolderBayer
            //foreach file in filesInfoBayer array create a directory after it's filedate and copy it to that directory then delete original
            foreach (FileInfo file in filesInfoClientT)
            {
                filePath = file.FullName; //fullpath=src path + file name   

                fileName = file.Name;

                fileDate = GetDate(fileName);

                //destFolderPath_clientB = networkDrivePath_clientB;//assign path to destfolder

                string dateBaseFolderPath = Path.Combine(networkDrivePath_clientT, fileDate);

                string zipPath = dateBaseFolderPath + ".zip";
                if (!File.Exists(zipPath))
                {
                    Directory.CreateDirectory(dateBaseFolderPath);

                    //Define full path for copied file
                    destFolderPath_clientT = Path.Combine(dateBaseFolderPath, fileName);

                    //handle duplicates in destFolderPath_clientB
                    if (File.Exists(destFolderPath_clientT))
                    {
                        File.Delete(destFolderPath_clientT);
                    }
                    File.Copy(filePath, destFolderPath_clientT);

                    // Delete the source file
                    File.Delete(filePath);
                }
                else
                {
                    using (FileStream zipToOpen = new FileStream(zipPath, FileMode.Open))
                    {
                        using (ZipArchive archive = new ZipArchive(zipToOpen, ZipArchiveMode.Update))
                        {
                            // Check if the file already exists inside the ZIP
                            var existingEntry = archive.GetEntry(fileName);
                            if (existingEntry != null)
                            {
                                existingEntry.Delete(); // remove the duplicate first
                            }
                            archive.CreateEntryFromFile(filePath, Path.GetFileName(filePath));
                            // Delete the source file
                            File.Delete(filePath);
                        }
                    }
                }

                if (fileCount == 1)
                {
                    string[] dateFolders = Directory.GetDirectories(networkDrivePath_clientT);
                    int folderCount = dateFolders.Length;



                    // Only zip if it’s not already zipped
                    for (int i = 0; i < folderCount; i++)
                    {
                        //After all files are copied (outside file loop):
                        string zipFilePath = dateFolders[i] + ".zip";
                        if (!File.Exists(zipFilePath))
                        {
                            if (Directory.Exists(dateFolders[i]))
                            {
                                // Delete if old zip exists
                                if (File.Exists(zipFilePath))
                                {
                                    File.Delete(zipFilePath);
                                }

                                ZipFile.CreateFromDirectory(dateFolders[i], zipFilePath);

                                // Optionally delete the original folder after zipping
                                Directory.Delete(dateFolders[i], true);

                            }
                        }
                    }

                }
                fileCount = fileCount - 1;
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}
        public string GetDate(string name)
        {
            string date = "";
            Match match = Regex.Match(name, @"\d{4}_?\d{2}_?\d{2}");//Match 4digits then 2 digits then 2 digits
            string matchedDate = match.Value;//set date to the match value
            if (!string.IsNullOrEmpty(matchedDate))
            {
                matchedDate = matchedDate.Replace("_", "");

                var extractedDate = DateTime.ParseExact(matchedDate, "yyyyMMdd", CultureInfo.CurrentCulture);//format date
                date = extractedDate.ToString("yyyy-MM-dd");
            }
            return date;
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_1213390b996c41229aeb2690e397ff94.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2D80F953-86A9-40ED-8287-7AB7230C0AB8}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_5ebb2efd615e4d1d9f0ed86105efd78e</RootNamespace>
    <AssemblyName>ST_1213390b996c41229aeb2690e397ff94</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_1213390b996c41229aeb2690e397ff94</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_1213390b996c41229aeb2690e397ff94</msb:DisplayName>
    <msb:ProjectId>{6534FA91-D148-45E3-8307-FCF5261EB61D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_1213390b996c41229aeb2690e397ff94.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Settings.get_Default():ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Sett" +
    "ings")]

namespace ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_5ebb2efd615e4d1d9f0ed86105efd78e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_5ebb2efd615e4d1d9f0ed86105efd78e")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_5ebb2efd615e4d1d9f0ed86105efd78e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_1213390b996c41229aeb2690e397ff94.dll">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
aAA5AAEAAQAAABAA5QVQBmEAAQAEAAABEACWBlAGdQADAAgAAwEAAOAGAABZAAQACwARAM0EAAER
AI4BBAERAJQACAEGBlcADAFWgNAGDwFWgG4BDwFQIAAAAACGAN8EBgABAEQiAAAAAIYA9QHIAAEA
oCIAAAAAhhiMBQYAAgCoIgAAAACDGIwFBgACALAiAAAAAJMIeAUTAQIA3CIAAAAAkwh2AbkAAgDj
IgAAAACTCIIBGAECAOsiAAAAAJYIGQceAQMA8iIAAAAAhhiMBQYAAwD6IgAAAACRGJIFIwEDAAAA
AQAzAQAAAQC8AwkAjAUBABEAjAUGABkAjAUKACkAjAUQADEAjAUQADkAjAUQAEEAjAUQAEkAjAUQ
AFEAjAUQAFkAjAUQAGEAjAUQAGkAjAUGALkAjAUGAOEAjAUVAPEAjAUGAHEA2AY7APkAfwZAAAEB
ngRGAAkBsgNNAMEA5wNRABEBjQZVAHkAjAUQABkBJgFRABkBEQFRACEBYQFbACkB9QZbAKEA7gZh
ABEBTAdmAKEAEgJtAKEARwdyAIEAjAV4AIkAjAWAAIkAgAeKAJEAEgIGACEBGgGQAFEB9QCVAFkB
7QEGABEBQQZVABEB7gZhAGEBXAdyABEBEgKeAPkAJQcBAGkB8AOrAHkBsgNRACkBiQdhACkBjACz
ANEAngG5AKkA/Aa+AKkA5wPIAHEAjAUGAMEAjAUGAIkB4wDNAIkBOgfWAMkAjAXcAOkAjAUGAAgA
FAD2AAgAGAD7ACkAcwBeAS4ACwA2AS4AEwA/AS4AGwBeAS4AIwBnAS4AKwCQAS4AMwCQAS4AOwCW
AS4AQwBnAS4ASwCeAS4AUwCQAS4AWwC3AUMAYwD7AEkAcwBeAWEAewD7AGMAawD7ABsApAADAAEA
BAADAAAAfAUnAQAAqQEsAQAAHQcxAQIABQADAAIABgAFAAEABwAFAAIACAAHAASAAAABAAAAGiRC
EwAAAAAAAAEAAAAEAAAAAAAAAAAAAADkAF8AAAAAABAAAAAAAAAAAAAAAO0A+wMAAAAABAAAAAAA
AAAAAAAA5ADkBAAAAAAEAAAAAAAAAAAAAADkAMEEAAAAABAAAAAAAAAAAAAAAO0AOAAAAAAABAAA
AAAAAAAAAAAA5ACnBAAAAAAAAAAAAQAAAO8FAAAFAAIAAAAAAABTVF8xMjEzMzkwYjk5NmM0MTIy
OWFlYjI2OTBlMzk3ZmY5NAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5N
YW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAU1RfNWViYjJlZmQ2MTVlNGQxZDlmMGVkODYxMDVl
ZmQ3OGUAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UARmlsZU1vZGUAWmlwQXJjaGl2ZU1vZGUAVmFy
aWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQ3Jl
YXRlRW50cnlGcm9tRmlsZQBaaXBGaWxlAGdldF9OYW1lAEdldEZpbGVOYW1lAGdldF9GdWxsTmFt
ZQBuYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQ29tYmluZQBU
eXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9D
dXJyZW50Q3VsdHVyZQBDYXB0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNh
dGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAEdldERhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUARGVs
ZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAdmFsdWUAWmlwQXJjaGl2ZQBTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAFRvU3RyaW5nAE1hdGNoAFBhdGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRU
YXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0
TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzEyMTMzOTBiOTk2YzQxMjI5YWViMjY5MGUz
OTdmZjk0LmRsbABGaWxlU3RyZWFtAGdldF9JdGVtAFN5c3RlbS5JTy5Db21wcmVzc2lvbi5GaWxl
U3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBTeXN0ZW0uSU8uQ29tcHJlc3Npb24A
U3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rp
b24ARmlsZUluZm8AQ3VsdHVyZUluZm8ARmlsZVN5c3RlbUluZm8ARGlyZWN0b3J5SW5mbwBJRm9y
bWF0UHJvdmlkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdu
b3N0aWNzAFdlYlJlcXVlc3RNZXRob2RzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMA
U3lzdGVtLlJlc291cmNlcwBTVF81ZWJiMmVmZDYxNWU0ZDFkOWYwZWQ4NjEwNWVmZDc4ZS5Qcm9w
ZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAR2V0RGlyZWN0b3JpZXMA
U1RfNWViYjJlZmQ2MTVlNGQxZDlmMGVkODYxMDVlZmQ3OGUuUHJvcGVydGllcwBnZXRfVmFyaWFi
bGVzAEdldEZpbGVzAFNldHRpbmdzAFppcEZpbGVFeHRlbnNpb25zAFN5c3RlbS5UZXh0LlJlZ3Vs
YXJFeHByZXNzaW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAQ29uY2F0
AFBhcnNlRXhhY3QAT2JqZWN0AFN5c3RlbS5OZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQA
UmVnZXgAZ2V0X0Fzc2VtYmx5AENvcHkAQ3JlYXRlRGlyZWN0b3J5AENyZWF0ZUZyb21EaXJlY3Rv
cnkAWmlwQXJjaGl2ZUVudHJ5AEdldEVudHJ5AElzTnVsbE9yRW1wdHkAAAA9VQBzAGUAcgA6ADoA
TgBlAHQAdwBvAHIAawBEAHIAaQB2AGUAUABhAHQAaABfAGMAbABpAGUAbgB0AFQAAAEAgSNDADoA
XABVAHMAZQByAHMAXABPAFcATgBFAFIAXABEAG8AYwB1AG0AZQBuAHQAcwBcAEwAYQBrAGUAaABl
AGEAZAAgAFUAbgBpAHYAZQByAHMAaQB0AHkAXABNAGEAawBlACAAdQBwACAAYwBvAHUAcgBzAGUA
cwBcAE0AYQBrAGUAIAB1AHAAIABjAG8AdQByAHMAZQBzACAAKABXAGkAbgB0AGUAcgAgADIAMAAy
ADUAKQBcAFIAaQBpAHAAcABlAG4AIABwAHIAbwBqAGUAYwB0ACAAdwBpAHQAaAAgAFQARwBUACAA
cwBvAGwAdQB0AGkAbwBuAHMAXABzAG8AdQByAGMAZQAgAGYAbwBsAGQAZQByACAAVABlAGwAdQBz
AAAJLgB6AGkAcAAAJ1wAZAB7ADQAfQBfAD8AXABkAHsAMgB9AF8APwBcAGQAewAyAH0AAANfAAAR
eQB5AHkAeQBNAE0AZABkAAAVeQB5AHkAeQAtAE0ATQAtAGQAZAABcVMAVABfADUAZQBiAGIAMgBl
AGYAZAA2ADEANQBlADQAZAAxAGQAOQBmADAAZQBkADgANgAxADAANQBlAGYAZAA3ADgAZQAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAABvqGow3JlmSILilInBNYIX
AAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFtHwcUDg4ODh0ODh0SPQgIHRI9CA4OEkESRRJJHQ4I
CA4EIAASfQUgABKAgQYgARKAhRwDIAAcAyAADgUAAR0ODgUAAg4ODgQAAQIOBgABEoCZDgQAAQEO
BQACAQ4OByACAQ4RgJ0JIAIBEoChEYClBSABEkkOBAABDg4IAAMSSRJFDg4FAAIBDgIGBwMODhFV
BwACEoC5Dg4FIAIODg4EAAASaQkAAxFVDg4SgMEEIAEODggAARKAxRGAyQUgABKAzQcgAgEOEoDN
CLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEmUDBhJpAwYSEAIGCAMGERQEAAASZQUAAQES
aQQAABIQAwAAAQQIABJlBAgAEmkECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU1RfNWViYjJlZmQ2MTVlNGQxZDlmMGVkODYxMDVlZmQ3OGUA
AAUBAAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdodCBAIEhQIDIwMjUAAEkBABouTkVURnJhbWV3b3Jr
LFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43
AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nv
cmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAA
AAAAAABQQURQQURQtAAAAGA1AAAAAAAAAAAAAHo1AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABs
NQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAABgEAAAAAAAAAAAAABgENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQBCExokAAABAEITGiQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAR4AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABUAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAJgADAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAABIAFAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
AAAAAABTAFQAXwA1AGUAYgBiADIAZQBmAGQANgAxADUAZQA0AGQAMQBkADkAZgAwAGUAZAA4ADYA
MQAwADUAZQBmAGQANwA4AGUAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4AOQAyADQAMgAuADQAOQAzADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfADEAMgAxADMAMwA5ADAAYgA5ADkANgBjADQAMQAyADIAOQBhAGUAYgAyADYAOQAwAGUAMwA5
ADcAZgBmADkANAAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABU
AHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADEAMgAxADMAMwA5ADAAYgA5ADkANgBjADQAMQAyADIAOQBhAGUAYgAy
ADYAOQAwAGUAMwA5ADcAZgBmADkANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwA1AGUAYgBiADIAZQBmAGQANgAxADUAZQA0AGQAMQBkADkAZgAwAGUAZAA4
ADYAMQAwADUAZQBmAGQANwA4AGUAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADkAMgA0ADIALgA0ADkAMwAwAAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADQAMgAuADQAOQAzADAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAACMNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="164,41.6"
          Id="Package\Script Task clientT"
          TopLeft="431.666646359696,145.799999403358" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>