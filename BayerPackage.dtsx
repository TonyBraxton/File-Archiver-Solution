<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/9/2025 8:51:10 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-BK8EF5JA"
  DTS:CreatorName="LAPTOP-BK8EF5JA\OWNER"
  DTS:DTSID="{995C19AF-36A1-4DEC-9FAE-0D6886F7A3C5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="4105"
  DTS:ObjectName="Bayer Package"
  DTS:PackageType="5"
  DTS:VersionBuild="125"
  DTS:VersionGUID="{1239BBD6-9575-449B-819A-9284E0BEB73B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Z:\]"
      DTS:CreationName="FILE"
      DTS:DTSID="{C1EE1F25-C202-4008-8946-353241B17D44}"
      DTS:ObjectName="Z:\">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="2"
          DTS:ConnectionString="Z:\" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{399D67C4-746E-4692-B9AF-D341E9EE8748}"
      DTS:ObjectName="NetworkDrivePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Z:\BAYER</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task clientB"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{2A5C46CE-07F9-488C-A3F6-35EFD3C76824}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task clientB"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{7560BBA5-5F85-476B-8BE6-D4ADD8A56BA6}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="NetworkDrivePath_clientB">
          <DTS:VariableValue
            DTS:DataType="8">Z:\BAYER</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_03ba6d15246643cf9671a3b0edd3409d"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::NetworkDrivePath_clientB">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Settings.get_Default():ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Sett" +
    "ings")]

namespace ST_03ba6d15246643cf9671a3b0edd3409d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_03ba6d15246643cf9671a3b0edd3409d.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A98AB12F-7433-440F-AD36-D957FC34DF09}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_03ba6d15246643cf9671a3b0edd3409d</RootNamespace>
    <AssemblyName>ST_03ba6d15246643cf9671a3b0edd3409d</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion    



#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using static System.Net.WebRequestMethods;
using File = System.IO.File;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.IO.Compression;

#endregion

namespace ST_03ba6d15246643cf9671a3b0edd3409d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            string srcFolderPath_clientB; //@"D:\Files";
            string destFolderPath_clientB;
            string filePath;
            string fileName;
            string networkDrivePath_clientB = Dts.Variables["User::NetworkDrivePath_clientB"].Value.ToString(); ;


            string[] files_clientB;

            string fileDate="";

            srcFolderPath_clientB = @"C:\Users\OWNER\Documents\Lakehead University\Make up courses\Make up courses (Winter 2025)\Riippen project with TGT solutions\source folder Bayer";//@"C:paste the source folder for this client's files from your device";
            
            files_clientB = Directory.GetFiles(srcFolderPath_clientB);

            // Initialize array of FileInfo objects to hold file info
            FileInfo[] filesInfoClientB = new FileInfo[files_clientB.Length];

            // Get file info for each file in the source folder
            for (int i = 0; i < files_clientB.Length; i++)
            {
                filesInfoClientB[i] = new FileInfo(files_clientB[i]);
            }
            int fileCount = filesInfoClientB.Length;

            //get file info for each file srcFolderBayer
            //foreach file in filesInfoBayer array create a directory after it's filedate and copy it to that directory then delete original
            foreach (FileInfo file in filesInfoClientB)
            {
                filePath = file.FullName; //fullpath=src path + file name   

                fileName = file.Name;

                fileDate = GetDate(fileName);

                //destFolderPath_clientB = networkDrivePath_clientB;//assign path to destfolder

                string dateBaseFolderPath = Path.Combine(networkDrivePath_clientB, fileDate);

                string zipPath = dateBaseFolderPath + ".zip";
                if (!File.Exists(zipPath))
                {
                    Directory.CreateDirectory(dateBaseFolderPath);

                    //Define full path for copied file
                    destFolderPath_clientB = Path.Combine(dateBaseFolderPath, fileName);

                    //handle duplicates in destFolderPath_clientB
                    if (File.Exists(destFolderPath_clientB))
                    {
                        File.Delete(destFolderPath_clientB);
                    }
                    File.Copy(filePath, destFolderPath_clientB);

                    // Delete the source file
                    File.Delete(filePath);
                }
                else
                {                    
                    using (FileStream zipToOpen = new FileStream(zipPath, FileMode.Open))
                    {
                        using (ZipArchive archive = new ZipArchive(zipToOpen, ZipArchiveMode.Update))
                        {
                            // Check if the file already exists inside the ZIP
                            var existingEntry = archive.GetEntry(fileName);
                            if (existingEntry != null)
                            {
                                existingEntry.Delete(); // remove the duplicate first
                            }
                            archive.CreateEntryFromFile(filePath, Path.GetFileName(filePath));
                            // Delete the source file
                            File.Delete(filePath);
                        }
                    }
                }

                if (fileCount == 1)
                {
                    string[] dateFolders = Directory.GetDirectories(networkDrivePath_clientB);
                    int folderCount = dateFolders.Length;

                    

                    // Only zip if it’s not already zipped
                    for (int i = 0; i < folderCount; i++)
                    {
                        //After all files are copied (outside file loop):
                        string zipFilePath = dateFolders[i] + ".zip";
                        if (!File.Exists(zipFilePath))
                        {
                            if (Directory.Exists(dateFolders[i]))
                            {
                                // Delete if old zip exists
                                if (File.Exists(zipFilePath))
                                {
                                    File.Delete(zipFilePath);
                                }

                                ZipFile.CreateFromDirectory(dateFolders[i], zipFilePath);

                                // Optionally delete the original folder after zipping
                                Directory.Delete(dateFolders[i], true);

                            }
                        }
                    }
                    
                }
                fileCount = fileCount - 1;
            }

            Dts.TaskResult = (int)ScriptResults.Success;

		}
        public string GetDate(string name)
        {
            string date="";
            Match match = Regex.Match(name, @"\d{4}_?\d{2}_?\d{2}");//Match 4digits then 2 digits then 2 digits  _?(to account for underscore in Telus files dates
            string matchedDate = match.Value;//set date to the match value
            if (!string.IsNullOrEmpty(matchedDate))
            {
                matchedDate = matchedDate.Replace("_", "");
                var extractedDate = DateTime.ParseExact(matchedDate, "yyyyMMdd", CultureInfo.CurrentCulture);//format date
                date = extractedDate.ToString("yyyy-MM-dd");
            }
            return date;
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion


	}

}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_03ba6d15246643cf9671a3b0edd3409d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_03ba6d15246643cf9671a3b0edd3409d</msb:DisplayName>
    <msb:ProjectId>{6A13848D-CF64-4E6A-B680-068E97A96993}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_03ba6d15246643cf9671a3b0edd3409d.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_03ba6d15246643cf9671a3b0edd3409d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_03ba6d15246643cf9671a3b0edd3409d")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_03ba6d15246643cf9671a3b0edd3409d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_03ba6d15246643cf9671a3b0edd3409d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_03ba6d15246643cf9671a3b0edd3409d.dll">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
RAA5AAEAAQAAABAAwQUsBmEAAQAEAAABEAByBiwGdQADAAgAAwEAALwGAABZAAQACwARAKkEAAER
AGoBBAERAHAACAEGBjMADAFWgKwGDwFWgEoBDwFQIAAAAACGALsEBgABAEQiAAAAAIYA0QHIAAEA
oCIAAAAAhhhoBQYAAgCoIgAAAACDGGgFBgACALAiAAAAAJMIVAUTAQIA3CIAAAAAkwhSAbkAAgDj
IgAAAACTCF4BGAECAOsiAAAAAJYI9QYeAQMA8iIAAAAAhhhoBQYAAwD6IgAAAACRGG4FIwEDAAAA
AQAPAQAAAQCYAwkAaAUBABEAaAUGABkAaAUKACkAaAUQADEAaAUQADkAaAUQAEEAaAUQAEkAaAUQ
AFEAaAUQAFkAaAUQAGEAaAUQAGkAaAUGALkAaAUGAOEAaAUVAPEAaAUGAHEAtAY7APkAWwZAAAEB
egRGAAkBjgNNAMEAwwNRABEBaQZVAHkAaAUQABkBAgFRABkB7QBRACEBPQFbACkB0QZbAKEAygZh
ABEBKAdmAKEA7gFtAKEAIwdyAIEAaAV4AIkAaAWAAIkAXAeKAJEA7gEGACEB9gCQAFEB0QCVAFkB
yQEGABEBHQZVABEBygZhAGEBOAdyABEB7gGeAPkAAQcBAGkBzAOrAHkBjgNRACkBZQdhACkBaACz
ANEAegG5AKkA2Aa+AKkAwwPIAHEAaAUGAMEAaAUGAIkBvwDNAIkBFgfWAMkAaAXcAOkAaAUGAAgA
FAD2AAgAGAD7ACkAcwBeAS4ACwA2AS4AEwA/AS4AGwBeAS4AIwBnAS4AKwCQAS4AMwCQAS4AOwCW
AS4AQwBnAS4ASwCeAS4AUwCQAS4AWwC3AUMAYwD7AEkAcwBeAWEAewD7AGMAawD7ABsApAADAAEA
BAADAAAAWAUnAQAAhQEsAQAA+QYxAQIABQADAAIABgAFAAEABwAFAAIACAAHAASAAAABAAAAGiRM
EgAAAAAAAEQAAAAEAAAAAAAAAAAAAADkADsAAAAAABAAAAAAAAAAAAAAAO0A1wMAAAAABAAAAAAA
AAAAAAAA5ADABAAAAAAEAAAAAAAAAAAAAADkAJ0EAAAAABAAAAAAAAAAAAAAAO0AFAAAAAAABAAA
AAAAAAAAAAAA5ACDBAAAAAAAAAAAAQAAAMsFAAAFAAIAAAAAAAA8TW9kdWxlPgBTeXN0ZW0uSU8A
TWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAU1RfMDNiYTZk
MTUyNDY2NDNjZjk2NzFhM2IwZWRkMzQwOWQAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UARmlsZU1v
ZGUAWmlwQXJjaGl2ZU1vZGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQ3JlYXRlRW50cnlGcm9tRmlsZQBaaXBGaWxlAGdldF9OYW1lAEdl
dEZpbGVOYW1lAGdldF9GdWxsTmFtZQBuYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAQ29tYmluZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAGdldF9DdXJyZW50Q3VsdHVyZQBDYXB0dXJlAFZTVEFSVFNjcmlwdE9i
amVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAEdldERhdGUARWRp
dG9yQnJvd3NhYmxlU3RhdGUARGVsZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVn
Z2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2Fi
bGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJp
YnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmli
dXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0
dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1
dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJp
YnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAdmFsdWUAWmlwQXJj
aGl2ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAE1hdGNoAFBhdGgATWljcm9z
b2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNj
cmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzAzYmE2
ZDE1MjQ2NjQzY2Y5NjcxYTNiMGVkZDM0MDlkLmRsbABGaWxlU3RyZWFtAGdldF9JdGVtAFN5c3Rl
bS5JTy5Db21wcmVzc2lvbi5GaWxlU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBT
eXN0ZW0uSU8uQ29tcHJlc3Npb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARmlsZUluZm8AQ3VsdHVyZUluZm8ARmlsZVN5c3RlbUlu
Zm8ARGlyZWN0b3J5SW5mbwBJRm9ybWF0UHJvdmlkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgAuY3Rv
cgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFdlYlJlcXVlc3RNZXRob2RzAFN5c3RlbS5SdW50
aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8wM2JhNmQxNTI0NjY0M2Nm
OTY3MWEzYjBlZGQzNDA5ZC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5n
TW9kZXMAR2V0RGlyZWN0b3JpZXMAU1RfMDNiYTZkMTUyNDY2NDNjZjk2NzFhM2IwZWRkMzQwOWQu
UHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFNldHRpbmdzAFppcEZpbGVFeHRlbnNp
b25zAFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0
UmVzdWx0cwBFeGlzdHMAQ29uY2F0AFBhcnNlRXhhY3QAT2JqZWN0AFN5c3RlbS5OZXQAZ2V0X0Rl
ZmF1bHQAc2V0X1Rhc2tSZXN1bHQAUmVnZXgAZ2V0X0Fzc2VtYmx5AENvcHkAQ3JlYXRlRGlyZWN0
b3J5AENyZWF0ZUZyb21EaXJlY3RvcnkAWmlwQXJjaGl2ZUVudHJ5AEdldEVudHJ5AElzTnVsbE9y
RW1wdHkAAAA9VQBzAGUAcgA6ADoATgBlAHQAdwBvAHIAawBEAHIAaQB2AGUAUABhAHQAaABfAGMA
bABpAGUAbgB0AEIAAAEAgSNDADoAXABVAHMAZQByAHMAXABPAFcATgBFAFIAXABEAG8AYwB1AG0A
ZQBuAHQAcwBcAEwAYQBrAGUAaABlAGEAZAAgAFUAbgBpAHYAZQByAHMAaQB0AHkAXABNAGEAawBl
ACAAdQBwACAAYwBvAHUAcgBzAGUAcwBcAE0AYQBrAGUAIAB1AHAAIABjAG8AdQByAHMAZQBzACAA
KABXAGkAbgB0AGUAcgAgADIAMAAyADUAKQBcAFIAaQBpAHAAcABlAG4AIABwAHIAbwBqAGUAYwB0
ACAAdwBpAHQAaAAgAFQARwBUACAAcwBvAGwAdQB0AGkAbwBuAHMAXABzAG8AdQByAGMAZQAgAGYA
bwBsAGQAZQByACAAQgBhAHkAZQByAAAJLgB6AGkAcAAAJ1wAZAB7ADQAfQBfAD8AXABkAHsAMgB9
AF8APwBcAGQAewAyAH0AAANfAAAReQB5AHkAeQBNAE0AZABkAAAVeQB5AHkAeQAtAE0ATQAtAGQA
ZAABcVMAVABfADAAMwBiAGEANgBkADEANQAyADQANgA2ADQAMwBjAGYAOQA2ADcAMQBhADMAYgAw
AGUAZABkADMANAAwADkAZAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAAAB4gvRs3b0aR77LxmD2WoCgAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFtHwcUDg4ODh0O
Dh0SPQgIHRI9CA4OEkESRRJJHQ4ICA4EIAASfQUgABKAgQYgARKAhRwDIAAcAyAADgUAAR0ODgUA
Ag4ODgQAAQIOBgABEoCZDgQAAQEOBQACAQ4OByACAQ4RgJ0JIAIBEoChEYClBSABEkkOBAABDg4I
AAMSSRJFDg4FAAIBDgIGBwMODhFVBwACEoC5Dg4FIAIODg4EAAASaQkAAxFVDg4SgMEEIAEODggA
ARKAxRGAyQUgABKAzQcgAgEOEoDNCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEmUDBhJp
AwYSEAIGCAMGERQEAAASZQUAAQESaQQAABIQAwAAAQQIABJlBAgAEmkECAASEAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMDNiYTZkMTUyNDY2
NDNjZjk2NzFhM2IwZWRkMzQwOWQAAAUBAAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdodCBAIEhQIDIw
MjUAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5h
bWUSLk5FVCBGcmFtZXdvcmsgNC43AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2Vz
LlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50
aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAADw1AAAAAAAAAAAAAFY1AAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABINQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAABgEAAAAAAAAAAAAABgENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQBMEhokAAABAEwSGiQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAR4AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABUAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAJgADAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAABIAFAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
AAAAAABTAFQAXwAwADMAYgBhADYAZAAxADUAMgA0ADYANgA0ADMAYwBmADkANgA3ADEAYQAzAGIA
MABlAGQAZAAzADQAMAA5AGQAAAA8AA4AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4AOQAyADQAMgAuADQANgA4ADQAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfADAAMwBiAGEANgBkADEANQAyADQANgA2ADQAMwBjAGYAOQA2ADcAMQBhADMAYgAwAGUAZABk
ADMANAAwADkAZAAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABU
AHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADAAMwBiAGEANgBkADEANQAyADQANgA2ADQAMwBjAGYAOQA2ADcAMQBh
ADMAYgAwAGUAZABkADMANAAwADkAZAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwAwADMAYgBhADYAZAAxADUAMgA0ADYANgA0ADMAYwBmADkANgA3ADEAYQAz
AGIAMABlAGQAZAAzADQAMAA5AGQAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADkAMgA0ADIALgA0ADYAOAA0AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADQAMgAuADQANgA4ADQAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABoNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="164.8,41.6"
          Id="Package\Script Task clientB"
          TopLeft="465.499974866708,147.633332344956" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>